#
# win32 cblas.dll and cblas.lib construction script
#

Import( 'env' )
Import( 'arch_ext' )
Import('atlas_link_libs')
Import('arch_flags')
import os

env.SharedLibrary('kml', ['svm_c.cpp'], SHCCFLAGS=arch_flags, LINKFLAGS=arch_flags, LIBS=atlas_link_libs)

#
# In case of a Windows platform, build the win32 cblas.dll file on the basis of a ATLAS installation
#
if env['PLATFORM'] == 'win32':
	import os.path
	gcc_bin = env.FindFile( 'gcc.exe', ['/mingw/bin','/cygwin/bin'] )
	if gcc_bin == None:
		print "Could not find gcc.exe of a MinGW or Cygwin install, needed to"
		print "construct a DLL of ATLAS routines."
	else:	

		env.AppendENVPath('PATH', os.path.dirname(gcc_bin.abspath) )

		definition_file = env.Command( '#\lib\cblas_' + arch_ext + '.def', '#\lib\cblas.def', Copy( '$TARGET', '$SOURCE' ) )
		
		dll_builder = Builder( action='gcc -mno-cygwin -shared -o $TARGET ' + \
		        definition_file[0].path + ' $SOURCES -Wl,--enable-auto-import -Wl,--no-whole-archive',
				suffix = '.dll', src_suffix = '.a' )
		lib_builder = Builder( action='link /lib /machine:ix86 /def:$SOURCES /out:$TARGET',
				suffix = '.lib', src_suffix = '.def' )

		env.Append( BUILDERS = {'DLL': dll_builder } )
		env.Append( BUILDERS = {'LIB': lib_builder } )

		atlas_root = '/atlas/ATLAS'
		
		listing = os.listdir( os.path.join( atlas_root, 'lib' ) )
		if listing == None:
			print "Could not read contents of ATLAS_ROOT/lib. Please check your ATLAS installation."
		else:
			subdir = ''
			for entry in listing:
				if arch_ext in entry:
					subdir = entry
					break
			if subdir == '':
				print "Could not find an installed ATLAS library for this architecture (e.g., WinNT_P4SSE2)."
			else:
	
				final_path = atlas_root + "/lib/" + subdir + "/"
				atlas_files = [ final_path + 'liblapack.a',
								final_path + 'libcblas.a',
								final_path + 'libf77blas.a',
								final_path + 'libatlas.a' ]
				env.Depends( 'cblas_' + arch_ext + '.dll', definition_file )
				env.DLL( 'cblas_' + arch_ext + '.dll', atlas_files )
				env.LIB( 'cblas_' + arch_ext + '.lib', definition_file )

